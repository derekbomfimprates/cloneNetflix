{"ast":null,"code":"var _jsxFileName = \"/Users/derekbomfimprates/cloneNetflix/clonenetflix/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Tmdb from './Tmdb';\nimport MovieRow from './components/MovieRow';\nimport './App.css';\nimport FeaturedMovie from './components/FeaturedMovie';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default _s(() => {\n  _s();\n\n  const [movieList, setMovieList] = useState([]); // set to start empty\n\n  const [featuredData, setFeaturedData] = useState(null); // I am going to start it as null\n\n  useEffect(() => {\n    const loadAll = async () => {\n      // GEt list movie\n      let list = await Tmdb.getHomeList();\n      setMovieList(list); // get the movie featured\n\n      let originals = list.filter(i => i.slug === 'originals'); // just getting movie from originals from netflix \n      // getting a random movie\n\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1));\n      let chosen = originals[0].items.results[randomChosen];\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv');\n      console.log(chosenInfo);\n    };\n\n    loadAll();\n  }, []);\n  return (\n    /*#__PURE__*/\n\n    /*   \n    Header\n    highlights\n    lists  \n    Footer \n    We are going to use map\n    */\n    _jsxDEV(\"div\", {\n      className: \"page\",\n      children: [featuredData && /*#__PURE__*/_jsxDEV(FeaturedMovie, {\n        item: featuredData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 5\n      }, this) // when the component exist i will show it and send the item!\n      , /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"lists\",\n        children: movieList.map((item, key) => /*#__PURE__*/_jsxDEV(MovieRow, {\n          title: item.title,\n          items: item.items\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 3\n    }, this)\n  );\n}, \"/mp4Zi9ytVHS+i5YC/5I14s5PB0=\");","map":{"version":3,"sources":["/Users/derekbomfimprates/cloneNetflix/clonenetflix/src/App.js"],"names":["React","useEffect","useState","Tmdb","MovieRow","FeaturedMovie","movieList","setMovieList","featuredData","setFeaturedData","loadAll","list","getHomeList","originals","filter","i","slug","randomChosen","Math","floor","random","items","results","length","chosen","chosenInfo","getMovieInfo","id","console","log","map","item","key","title"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,QAAP,MAAoB,uBAApB;AACA,OAAO,WAAP;AACA,OAAOC,aAAP,MAA0B,4BAA1B;;AAEA,kBAAe,MAAM;AAAA;;AAGnB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,EAAD,CAA1C,CAHmB,CAG6B;;AAChD,QAAM,CAACM,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,IAAD,CAAhD,CAJmB,CAIqC;;AAExDD,EAAAA,SAAS,CAAC,MAAK;AACb,UAAOS,OAAO,GAAG,YAAS;AACxB;AACA,UAAIC,IAAI,GAAG,MAAMR,IAAI,CAACS,WAAL,EAAjB;AACAL,MAAAA,YAAY,CAACI,IAAD,CAAZ,CAHwB,CAKxB;;AAEA,UAAIE,SAAS,GAAGF,IAAI,CAACG,MAAL,CAAYC,CAAC,IAAGA,CAAC,CAACC,IAAF,KAAW,WAA3B,CAAhB,CAPwB,CAOiC;AACzD;;AACA,UAAIC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAgBP,SAAS,CAAC,CAAD,CAAT,CAAaQ,KAAb,CAAmBC,OAAnB,CAA2BC,MAA3B,GAAoC,CAApD,CAAX,CAAnB;AACA,UAAIC,MAAM,GAAGX,SAAS,CAAC,CAAD,CAAT,CAAaQ,KAAb,CAAmBC,OAAnB,CAA2BL,YAA3B,CAAb;AACA,UAAIQ,UAAU,GAAG,MAAMtB,IAAI,CAACuB,YAAL,CAAkBF,MAAM,CAACG,EAAzB,EAA6B,IAA7B,CAAvB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAZ;AACD,KAbD;;AAcJf,IAAAA,OAAO;AACJ,GAhBQ,EAgBN,EAhBM,CAAT;AAiBA;AAAA;;AACE;AACJ;AACA;AACA;AACA;AACA;AACA;AACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,iBAEGF,YAAY,iBACb,QAAC,aAAD;AAAe,QAAA,IAAI,EAAEA;AAArB;AAAA;AAAA;AAAA;AAAA,cAHF,CAGwC;AAHxC,qBAME;AAAS,QAAA,SAAS,EAAC,OAAnB;AAAA,kBACGF,SAAS,CAACwB,GAAV,CAAc,CAACC,IAAD,EAAOC,GAAP,kBACb,QAAC,QAAD;AAAoB,UAAA,KAAK,EAAGD,IAAI,CAACE,KAAjC;AAAwC,UAAA,KAAK,EAAEF,IAAI,CAACV;AAApD,WAAeW,GAAf;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA;AARA;AAsBD,CA7CD","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport Tmdb from './Tmdb';\nimport MovieRow from'./components/MovieRow';\nimport './App.css'\nimport FeaturedMovie from './components/FeaturedMovie';\n\nexport default () => {\n\n\n  const [movieList, setMovieList] = useState([]); // set to start empty\n  const [featuredData, setFeaturedData] = useState(null); // I am going to start it as null\n\n  useEffect(() =>{\n    const  loadAll = async()=>{\n      // GEt list movie\n      let list = await Tmdb.getHomeList();\n      setMovieList(list);\n\n      // get the movie featured\n\n      let originals = list.filter(i=> i.slug === 'originals'); // just getting movie from originals from netflix \n      // getting a random movie\n      let randomChosen = Math.floor(Math.random()* (originals[0].items.results.length - 1))\n      let chosen = originals[0].items.results[randomChosen];\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv');\n      console.log(chosenInfo);\n    }\nloadAll();\n  }, []);\n  return (\n    /*   \n    Header\n    highlights\n    lists  \n    Footer \n    We are going to use map\n    */\n  <div className=\"page\">\n  \n    {featuredData &&  \n    <FeaturedMovie item={featuredData} /> // when the component exist i will show it and send the item!\n    }\n    \n    <section className=\"lists\">\n      {movieList.map((item, key)=>(\n        <MovieRow key={key} title= {item.title} items={item.items}/>\n      ))}\n    </section>\n \n    </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}